//DO NOT EDIT THIS FILE, it is generated by idlcpp
//http://www.idlcpp.org

#pragma once

#include "../pafcore/Introspectable.h"
#include "../pafcore/SmartPtr.h"
namespace pafcore{ class ClassType; }


#include <string>
class Scene;


class Node : public pafcore::Introspectable
{
public:
	static ::pafcore::ClassType* GetType();
	::pafcore::ClassType* getType();
	void* getAddress();

	Node();
	::pafcore::BorrowedPtr<Node> addChild(::pafcore::UniquePtr<Node> && node);
	::pafcore::BorrowedPtr<Node> addSibling(::pafcore::UniquePtr<Node> && node);
	bool isFreeNode()const ;
	static ::pafcore::UniquePtr<Node> New();

public:
	void check__(Scene* scene, Node* parent, int depth);
public:
	pafcore::UniquePtr<Node> m_nextSibling;
	pafcore::BorrowedPtr<Node> m_prevSibling;
	pafcore::UniquePtr<Node> m_childHead;
	pafcore::BorrowedPtr<Node> m_childTail;
	pafcore::BorrowedPtr<Node> m_parent;
	pafcore::BorrowedPtr<Scene> m_scene;
	std::string m_name;
public:
	static pafcore::BorrowedPtr<Node> PushBack(pafcore::UniquePtr<Node>&& node, pafcore::BorrowedPtr<Node> parentNode);
	static pafcore::BorrowedPtr<Node> InsertBefore(pafcore::UniquePtr<Node>&& node, pafcore::BorrowedPtr<Node> siblingNode);
	static pafcore::UniquePtr<Node> RemoveFromParent(pafcore::BorrowedPtr<Node> node);

};


inline pafcore::BorrowedPtr<Node> Node::addChild(pafcore::UniquePtr<Node>&& node)
{
	return PushBack(std::move(node), pafcore::BorrowedPtr<Node>(this));
}

inline pafcore::BorrowedPtr<Node> Node::addSibling(pafcore::UniquePtr<Node>&& node)
{
	return InsertBefore(std::move(node), pafcore::BorrowedPtr<Node>(this));
}

inline bool Node::isFreeNode() const
{
	return !bool(m_parent);
}

